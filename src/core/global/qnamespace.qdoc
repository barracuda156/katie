/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Copyright (C) 2016 Ivailo Monev
**
** This file is part of the documentation of the Katie Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License Usage
** This file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.  Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \namespace Qt
    \inmodule QtCore
    \target Qt Namespace

    \brief The Qt namespace contains miscellaneous identifiers
    used throughout the Qt library.
*/

/*!
    \enum Qt::Orientation

    This type is used to signify an object's orientation.

    \value Horizontal
    \value Vertical

    Orientation is used with QScrollBar for example.
*/

/*!
    \enum Qt::AlignmentFlag

    This enum type is used to describe alignment. It contains
    horizontal and vertical flags that can be combined to produce
    the required effect.

    The \l{TextElideMode} enum can also be used in many situations
    to fine-tune the appearance of aligned text.

    The horizontal flags are:

    \value AlignLeft Aligns with the left edge.
    \value AlignRight Aligns with the right edge.
    \value AlignHCenter Centers horizontally in the available space.
    \value AlignJustify Justifies the text in the available space.

    The vertical flags are:

    \value AlignTop Aligns with the top.
    \value AlignBottom Aligns with the bottom.
    \value AlignVCenter Centers vertically in the available space.

    You can use only one of the horizontal flags at a time. There is
    one two-dimensional flag:

    \value AlignCenter Centers in both dimensions.

    You can use at most one horizontal and one vertical flag at a
    time. Qt::AlignCenter counts as both horizontal and vertical.

    Three enum values are useful in applications that can be run in
    right-to-left mode:

    \value AlignAbsolute  If the widget's layout direction is
        Qt::RightToLeft (instead of Qt::LeftToRight, the default),
        Qt::AlignLeft refers to the \e right edge and Qt::AlignRight
        to the \e left edge. This is normally the desired behavior.
        If you want Qt::AlignLeft to always mean "left" and
        Qt::AlignRight to always mean "right", combine the flag with
        Qt::AlignAbsolute.
    \value AlignLeading  Synonym for Qt::AlignLeft.
    \value AlignTrailing  Synonym for Qt::AlignRight.

    Masks:

    \value AlignHorizontal_Mask
    \value AlignVertical_Mask

    Conflicting combinations of flags have undefined meanings.
*/

/*!
    \enum Qt::ApplicationAttribute

    This enum describes attributes that change the behavior of
    application-wide features. These are enabled and disabled using
    QCoreApplication::setAttribute(), and can be tested for with
    QCoreApplication::testAttribute().

    \value AA_ImmediateWidgetCreation Ensures that widgets are created
           as soon as they are constructed. By default, resources for
           widgets are allocated on demand to improve efficiency and
           minimize resource usage. Setting or clearing this attribute
           affects widgets constructed after the change. Setting it
           tells Qt to create toplevel windows immediately.
           Therefore, if it is important to minimize resource
           consumption, do not set this attribute.

    \value AA_DontShowIconsInMenus Actions with the Icon property won't be
           shown in any menus unless specifically set by the
           QAction::iconVisibleInMenu property. Changes in the
           QAction::iconVisibleInMenu property will always be picked up.

    \value AA_NativeWindows Ensures that widgets have native windows.

    \value AA_DontCreateNativeWidgetSiblings Ensures that siblings of native
           widgets stay non-native unless specifically set by the
           Qt::WA_NativeWindow attribute.

    \value AA_X11InitThreads Calls XInitThreads() as part of the QApplication
           construction in order to make Xlib calls thread-safe. This
           attribute must be set before QApplication is constructed.

    \omitvalue AA_AttributeCount
*/

/*!
    \enum Qt::MouseButton

    This enum type describes the different mouse buttons.

    \value NoButton        The button state does not refer to any
    button (see QMouseEvent::button()).
    \value LeftButton      The left button is pressed, or an event refers
    to the left button. (The left button may be the right button on
    left-handed mice.)
    \value RightButton     The right button.
    \value MiddleButton    The middle button.

    \sa KeyboardModifier Modifier
*/

/*!
    \enum Qt::KeyboardModifier

    This enum describes the modifier keys.

    \value NoModifier       No modifier key is pressed.
    \value ShiftModifier    A Shift key on the keyboard is pressed.
    \value ControlModifier  A Ctrl key on the keyboard is pressed.
    \value AltModifier      An Alt key on the keyboard is pressed.
    \value MetaModifier     A Meta key on the keyboard is pressed.
    \value KeypadModifier   A keypad button is pressed.
    \value GroupSwitchModifier X11 only. A Mode_switch key on the keyboard is pressed.

    \omitvalue KeyboardModifierMask

    \sa MouseButton Modifier
*/

/*!
    \enum Qt::Modifier

    This enum provides shorter names for the keyboard modifier keys
    supported by Qt.

    \value SHIFT The Shift keys provided on all standard keyboards.
    \value META The Meta keys.
    \value CTRL The Ctrl keys.
    \value ALT The normal Alt keys, but not keys like AltGr.
    \value UNICODE_ACCEL The shortcut is specified as a Unicode code
    point, not as a Qt Key.
    \omitvalue MODIFIER_MASK

    \sa KeyboardModifier MouseButton
*/

/*!
    \enum Qt::GlobalColor

    Qt's predefined QColor objects:

    \value white       \span {id="color-white"} {White (#ffffff) }
    \value black       \span {id="color-black"} {Black (#000000) }
    \value red         \span {id="color-red"} {Red (#ff0000) }
    \value darkRed     \span {id="color-darkRed"} {Dark red (#800000) }
    \value green       \span {id="color-green"} {Green (#00ff00) }
    \value darkGreen   \span {id="color-darkGreen"} {Dark green (#008000) }
    \value blue        \span {id="color-blue"} {Blue (#0000ff) }
    \value darkBlue    \span {id="color-darkBlue"} {Dark blue (#000080) }
    \value cyan        \span {id="color-cyan"} {Cyan (#00ffff) }
    \value darkCyan    \span {id="color-darkCyan"} {Dark cyan (#008080) }
    \value magenta     \span {id="color-magenta"} {Magenta (#ff00ff) }
    \value darkMagenta \span {id="color-darkMagenta"} {Dark magenta (#800080) }
    \value yellow      \span {id="color-yellow"} {Yellow (#ffff00) }
    \value darkYellow  \span {id="color-darkYellow"} {Dark yellow (#808000) }
    \value gray        \span {id="color-gray"} {Gray (#a0a0a4) }
    \value darkGray    \span {id="color-darkGray"} {Dark gray (#808080) }
    \value lightGray   \span {id="color-lightGray"} {Light gray (#c0c0c0) }
    \value transparent a transparent black value (i.e., QColor(0, 0, 0, 0))
    \value color0 0 pixel value (for bitmaps)
    \value color1 1 pixel value (for bitmaps)

    \sa QColor

*/

/*!
    \enum Qt::PenStyle

    This enum type defines the pen styles that can be drawn using
    QPainter. The styles are:

    \table
    \row
    \o \inlineimage qpen-solid.png
    \o \inlineimage qpen-dash.png
    \o \inlineimage qpen-dot.png
    \row
    \o Qt::SolidLine
    \o Qt::DashLine
    \o Qt::DotLine
    \row
    \o \inlineimage qpen-dashdot.png
    \o \inlineimage qpen-dashdotdot.png
    \o \inlineimage qpen-custom.png
    \row
    \o Qt::DashDotLine
    \o Qt::DashDotDotLine
    \o Qt::CustomDashLine
    \endtable

    \value NoPen  no line at all. For example, QPainter::drawRect()
    fills but does not draw any boundary line.

    \value SolidLine  A plain line.
    \value DashLine  Dashes separated by a few pixels.
    \value DotLine  Dots separated by a few pixels.
    \value DashDotLine  Alternate dots and dashes.
    \value DashDotDotLine  One dash, two dots, one dash, two dots.
    \value CustomDashLine  A custom pattern defined using
                           QPainterPathStroker::setDashPattern().

    \sa QPen
*/

/*!
    \enum Qt::PenCapStyle

    This enum type defines the pen cap styles supported by Qt, i.e.
    the line end caps that can be drawn using QPainter.

    \table
    \row
    \o \inlineimage qpen-square.png
    \o \inlineimage qpen-flat.png
    \o \inlineimage qpen-roundcap.png
    \row
    \o Qt::SquareCap
    \o Qt::FlatCap
    \o Qt::RoundCap
    \endtable

    \value FlatCap  a square line end that does not cover the end
        point of the line.
    \value SquareCap  a square line end that covers the end point and
        extends beyond it by half the line width.
    \value RoundCap  a rounded line end.

    \sa QPen
*/

/*!
    \enum Qt::PenJoinStyle

    This enum type defines the pen join styles supported by Qt, i.e.
    which joins between two connected lines can be drawn using
    QPainter.

    \table
    \row
    \o \inlineimage qpen-bevel.png
    \o \inlineimage qpen-miter.png
    \o \inlineimage qpen-roundjoin.png
    \row
    \o Qt::BevelJoin
    \o Qt::MiterJoin
    \o Qt::RoundJoin
    \endtable

    \value MiterJoin  The outer edges of the lines are extended to
           meet at an angle, and this area is filled.
    \value BevelJoin  The triangular notch between the two lines is filled.
    \value RoundJoin  A circular arc between the two lines is filled.
    \value SvgMiterJoin A miter join corresponding to the definition of
           a miter join in the \l{SVG 1.2 Tiny} specification.

    \sa QPen
*/

/*!
    \enum Qt::BrushStyle

    This enum type defines the brush styles supported by Qt, i.e. the
    fill pattern of shapes drawn using QPainter.

    \image brush-styles.png Brush Styles

    \value NoBrush  No brush pattern.
    \value SolidPattern  Uniform color.
    \value Dense1Pattern  Extremely dense brush pattern.
    \value Dense2Pattern  Very dense brush pattern.
    \value Dense3Pattern  Somewhat dense brush pattern.
    \value Dense4Pattern  Half dense brush pattern.
    \value Dense5Pattern  Somewhat sparse brush pattern.
    \value Dense6Pattern  Very sparse brush pattern.
    \value Dense7Pattern  Extremely sparse brush pattern.
    \value HorPattern  Horizontal lines.
    \value VerPattern  Vertical lines.
    \value CrossPattern  Crossing horizontal and vertical lines.
    \value BDiagPattern  Backward diagonal lines.
    \value FDiagPattern  Forward diagonal lines.
    \value DiagCrossPattern  Crossing diagonal lines.
    \value LinearGradientPattern  Linear gradient (set using a dedicated QBrush constructor).
    \value RadialGradientPattern  Radial gradient (set using a dedicated QBrush constructor).
    \value TexturePattern  Custom pattern (see QBrush::setTexture()).

    \sa QBrush
*/

/*!
    \enum Qt::TextFlag

    This enum type is used to define some modifier flags. Some of
    these flags only make sense in the context of printing:

    \value TextSingleLine Treats all whitespace as spaces and prints just
           one line.
    \value TextDontClip If it's impossible to stay within the given bounds,
           it prints outside.
    \value TextShowMnemonic Displays the string "\&P" as \underline{P}
           (see QButton for an example). For an ampersand, use "\&\&".
    \value TextWordWrap Breaks lines at appropriate points, e.g. at word
           boundaries.
    \value TextWrapAnywhere Breaks lines anywhere, even within words.
    \value TextHideMnemonic Same as Qt::TextShowMnemonic but doesn't draw
           the underlines.
    \value TextDontPrint Treat this text as "hidden" and don't print it.
    \value TextIncludeTrailingSpaces When this option is set,
           QTextLine::naturalTextWidth() and naturalTextRect() will
           return a value that includes the width of trailing spaces in the
           text; otherwise this width is excluded.

    \omitvalue TextLongestVariant Ensures that the longest variant is always used
           when computing the size of a multi-variant string. (Internal)
    \omitvalue TextForceLeftToRight
    \omitvalue TextForceRightToLeft

    You can use as many modifier flags as you want, except that
    Qt::TextSingleLine and Qt::TextWordWrap cannot be combined.

    Flags that are inappropriate for a given use are generally
    ignored.
*/

/*!
    \enum Qt::BGMode

    Background mode:

    \value TransparentMode
    \value OpaqueMode
*/

/*!
    \enum Qt::ConnectionType

    This enum describes the types of connection that can be used
    between signals and slots. In particular, it determines whether a
    particular signal is delivered to a slot immediately or queued for
    delivery at a later time.

    \value AutoConnection
            (default) If the signal is emitted from a different thread than the
            receiving object, the signal is queued, behaving as
            Qt::QueuedConnection. Otherwise, the slot is invoked directly,
            behaving as Qt::DirectConnection. The type of connection is
            determined when the signal is emitted.

    \value DirectConnection
           The slot is invoked immediately, when the signal is
           emitted.

    \value QueuedConnection
           The slot is invoked when control returns to the event loop
           of the receiver's thread. The slot is executed in the
           receiver's thread.

    \value BlockingQueuedConnection
           Same as QueuedConnection, except the current thread blocks
           until the slot returns. This connection type should only be
           used where the emitter and receiver are in different
           threads.  \note Violating this rule can cause your
           application to deadlock.

    \value UniqueConnection
           Same as AutoConnection, but the connection is made only if
           it does not duplicate an existing connection. i.e., if the
           same signal is already connected to the same slot for the
           same pair of objects, then the connection will fail. This
           connection type was introduced in Qt 4.6.

    With queued connections, the parameters must be of types that are
    known to Qt's meta-object system, because Qt needs to copy the
    arguments to store them in an event behind the scenes. If you try
    to use a queued connection and get the error message:

    \snippet doc/src/snippets/code/doc_src_qnamespace.qdoc 0

    Call qRegisterMetaType() to register the data type before you
    establish the connection.

    When using signals and slots with multiple threads, see \l{Signals and Slots Across Threads}.

    \sa {Thread Support in Qt}, QObject::connect(), qRegisterMetaType(), Q_DECLARE_METATYPE()
*/

/*!
    \enum Qt::DateFormat

    \value TextDate The default Qt format, which includes the day and month name,
    the day number in the month, and the year in full. The day and month names will
    be short, localized names. This is basically equivalent to using the date format
    string, "ddd MMM d yyyy". See QDate::toString() for more information.

    \value ISODate \l{ISO 8601} extended format: either \c{YYYY-MM-DD} for dates or
    \c{YYYY-MM-DDTHH:mm:ss}, \c{YYYY-MM-DDTHH:mm:ssTZD} (e.g., 1997-07-16T19:20:30+01:00)
    for combined dates and times.

    \value SystemLocaleShortDate The \l{QLocale::ShortFormat}{short format} used
    by the \l{QLocale::system()}{operating system}.

    \value SystemLocaleLongDate The \l{QLocale::LongFormat}{long format} used
    by the \l{QLocale::system()}{operating system}.

    \value SystemLocaleDate \e{This enum value is deprecated.} Use Qt::SystemLocaleShortDate
    instead (or Qt::SystemLocaleLongDate if you want long dates).

    \note For \c ISODate formats, each \c Y, \c M and \c D represents a single digit
    of the year, month and day used to specify the date. Each \c H, \c M and \c S
    represents a single digit of the hour, minute and second used to specify the time.
    The presence of a literal \c T character is used to separate the date and time when
    both are specified.
*/


/*!
    \enum Qt::TimeSpec

    \value LocalTime Locale dependent time (Timezones and Daylight Savings Time).
    \value UTC Coordinated Universal Time, replaces Greenwich Mean Time.
    \value OffsetFromUTC An offset in seconds from Coordinated Universal Time.
*/

/*!
    \enum Qt::DayOfWeek

    \value Monday
    \value Tuesday
    \value Wednesday
    \value Thursday
    \value Friday
    \value Saturday
    \value Sunday
*/

/*!
    \enum Qt::CaseSensitivity

    \value CaseInsensitive
    \value CaseSensitive
*/

/*!
    \enum Qt::ToolBarArea

    \value LeftToolBarArea
    \value RightToolBarArea
    \value TopToolBarArea
    \value BottomToolBarArea
    \value AllToolBarAreas
    \value NoToolBarArea

    \omitvalue ToolBarArea_Mask
*/

/*!
    \enum Qt::DockWidgetArea

    \value LeftDockWidgetArea
    \value RightDockWidgetArea
    \value TopDockWidgetArea
    \value BottomDockWidgetArea
    \value AllDockWidgetAreas
    \value NoDockWidgetArea

    \omitvalue DockWidgetArea_Mask
*/

/*!
    \enum Qt::ImageConversionFlag

    The options marked "(default)" are set if no other values from
    the list are included (since the defaults are zero):

    Color/Mono preference (ignored for QBitmap):

    \value AutoColor (default) - If the image has \link
           QImage::depth() depth\endlink 1 and contains only
           black and white pixels, the pixmap becomes monochrome.
    \value ColorOnly The pixmap is dithered/converted to the
           \link QPixmap::defaultDepth() native display depth\endlink.
    \value MonoOnly The pixmap becomes monochrome. If necessary,
           it is dithered using the chosen dithering algorithm.

    Dithering mode preference for RGB channels:

    \value DiffuseDither (default) - A high-quality dither.
    \value OrderedDither A faster, more ordered dither.
    \value ThresholdDither No dithering; closest color is used.

    Dithering mode preference for alpha channel:

    \value ThresholdAlphaDither (default) - No dithering.
    \value OrderedAlphaDither A faster, more ordered dither.
    \value DiffuseAlphaDither A high-quality dither.

    Color matching versus dithering preference:

    \value PreferDither (default when converting to a pixmap) - Always dither
           32-bit images when the image is converted to 8 bits.
    \value AvoidDither (default when converting for the purpose of saving to
           file) - Dither 32-bit images only if the image has more than 256
           colors and it is being converted to 8 bits.
    \omitvalue AutoDither

    \omitvalue ColorMode_Mask
    \omitvalue Dither_Mask
    \omitvalue AlphaDither_Mask
    \omitvalue DitherMode_Mask

    \value NoOpaqueDetection Do not check whether the image contains non-opaque
           pixels. Use this if you know that the image is semi-transparent and
           you want to avoid the overhead of checking the pixels in the image
           until a non-opaque pixel is found, or if you want the pixmap to
           retain an alpha channel for some other reason. If the image has no
           alpha channel this flag has no effect.
*/

/*!
    \enum Qt::UIEffect

    This enum describes the available UI effects.

    By default, Qt will try to use the platform specific desktop
    settings for each effect. Use QApplication::setEffectEnabled()
    to enable or disable a particular effect.

    Note that all effects are disabled on screens running at less than
    16-bit color depth.

    \omitvalue UI_General

    \value UI_FadeMenu Show faded menus.
    \value UI_FadeTooltip Show tooltip fading effects.

    \sa QApplication::setEffectEnabled()
*/

/*! \enum Qt::AspectRatioMode

    This enum type defines what happens to the aspect ratio when
    scaling an rectangle.

    \image qimage-scaling.png

    \value IgnoreAspectRatio  The size is scaled freely. The aspect
                              ratio is not preserved.
    \value KeepAspectRatio  The size is scaled to a rectangle as
                            large as possible inside a given
                            rectangle, preserving the aspect ratio.
    \value KeepAspectRatioByExpanding  The size is scaled to a
                                       rectangle as small as possible
                                       outside a given rectangle,
                                       preserving the aspect ratio.

    \sa QSize::scale(), QImage::scaled()
*/

/*! \enum Qt::TransformationMode

    This enum type defines whether image transformations (e.g.,
    scaling) should be smooth or not.

    \value FastTransformation  The transformation is performed
                               quickly, with no smoothing.
    \value SmoothTransformation  The resulting image is transformed
                                 using bilinear filtering.

    \sa QImage::scaled()
*/

/*! \enum Qt::Axis

    This enum type defines three values to represent the three
    axes in the cartesian coordinate system.

    \value XAxis  The X axis.
    \value YAxis  The Y axis.
    \value ZAxis  The Z axis.

    \sa QTransform::rotate(), QTransform::rotateRadians()
 */

/*!
    \enum Qt::WidgetAttribute

    \keyword widget attributes

    This enum type is used to specify various widget attributes.
    Attributes are set and cleared with QWidget::setAttribute(), and
    queried with QWidget::testAttribute(), although some have special
    convenience functions which are mentioned below.

    \value WA_AcceptDrops Allows data from drag and drop operations
    to be dropped onto the widget (see QWidget::setAcceptDrops()).

    \value WA_AlwaysShowToolTips Enables tooltips for inactive windows.

    \value WA_CustomWhatsThis Indicates that the widget wants to
    continue operating normally in "What's This?" mode. This is set by the
    widget's author.

    \value WA_DeleteOnClose Makes Qt delete this widget when the
    widget has accepted the close event (see QWidget::closeEvent()).

    \value WA_Disabled Indicates that the widget is disabled, i.e.
    it does not receive any mouse or keyboard events. There is also a
    getter functions QWidget::isEnabled().  This is set/cleared by the
    Qt kernel.

    \value WA_DontShowOnScreen Indicates that the widget is hidden or is
    not a part of the viewable Desktop.

    \value WA_ForceDisabled Indicates that the widget is
    explicitly disabled, i.e. it will remain disabled even when all
    its ancestors are set to the enabled state. This implies
    WA_Disabled. This is set/cleared by QWidget::setEnabled() and
    QWidget::setDisabled().

    \value WA_ForceUpdatesDisabled Indicates that updates are
    explicitly disabled for the widget; i.e. it will remain disabled
    even when all its ancestors are set to the updates-enabled state.
    This implies WA_UpdatesDisabled. This is set/cleared by
    QWidget::setUpdatesEnabled().

    \value WA_GroupLeader
        \e{This attribute has been deprecated.} Use QWidget::windowModality
        instead.

    \value WA_Hover Forces Qt to generate paint events when the mouse
    enters or leaves the widget. This feature is typically used when
    implementing custom styles; see the \l{widgets/styles}{Styles}
    example for details.

    \value WA_KeyboardFocusChange Set on a toplevel window when
    the users changes focus with the keyboard (tab, backtab, or shortcut).

    \value WA_LayoutOnEntireRect Indicates that the widget
    wants QLayout to operate on the entire QWidget::rect(), not only
    on QWidget::contentsRect(). This is set by the widget's author.

    \value WA_LayoutUsesWidgetRect Ignore the layout item rect from the style
    when laying out this widget with QLayout.

    \value WA_Mapped Indicates that the widget is mapped on screen.
    This is set/cleared by the Qt kernel.

    \value WA_MouseNoMask Makes the widget receive mouse events for
    the entire widget regardless of the currently set mask,
    overriding QWidget::setMask(). This is not applicable for
    top-level windows.

    \value WA_MouseTracking Indicates that the widget has mouse
    tracking enabled. See QWidget::mouseTracking.

    \value WA_Moved Indicates that the widget has an explicit
    position. This is set/cleared by QWidget::move() and
    by QWidget::setGeometry().

    \value WA_NoBackground This value is obsolete. Use
    WA_OpaquePaintEvent instead.

    \value WA_NoChildEventsForParent Indicates that the widget does
    not want ChildAdded or ChildRemoved events sent to its
    parent. This is rarely necessary but can help to avoid automatic
    insertion widgets like splitters and layouts. This is set by a
    widget's author.

    \value WA_NoChildEventsFromChildren Indicates that the widget does
    not want to receive ChildAdded or ChildRemoved events sent from its
    children. This is set by a widget's author.

    \value WA_NoMouseReplay Used for pop-up widgets. Indicates that the most
    recent mouse press event should not be replayed when the pop-up widget
    closes. The flag is set by the widget's author and cleared by the Qt kernel
    every time the widget receives a new mouse event.

    \value WA_NoMousePropagation Prohibits mouse events from being propagated
    to the widget's parent. This attribute is disabled by default.

    \value WA_TransparentForMouseEvents When enabled, this attribute disables
    the delivery of mouse events to the widget and its children. Mouse events
    are delivered to other widgets as if the widget and its children were not
    present in the widget hierarchy; mouse clicks and other events effectively
    "pass through" them. This attribute is disabled by default.

    \value WA_NoSystemBackground Indicates that the widget has no background,
    i.e. when the widget receives paint events, the background is not
    automatically repainted. \note Unlike WA_OpaquePaintEvent, newly exposed
    areas are \bold never filled with the background (e.g., after showing a
    window for the first time the user can see "through" it until the
    application processes the paint events). This flag is set or cleared by the
    widget's author.

    \value WA_OpaquePaintEvent Indicates that the widget paints all its pixels
    when it receives a paint event. Thus, it is not required for operations
    like updating, resizing, scrolling and focus changes to erase the widget
    before generating paint events. The use of WA_OpaquePaintEvent provides a
    small optimization by helping to reduce flicker on systems that do not
    support double buffering and avoiding computational cycles necessary to
    erase the background prior to painting. \note Unlike
    WA_NoSystemBackground, WA_OpaquePaintEvent makes an effort to avoid
    transparent window backgrounds. This flag is set or cleared by the widget's
    author.

    \value WA_OutsideWSRange Indicates that the widget is outside
    the valid range of the window system's coordinate system. A widget
    outside the valid range cannot be mapped on screen. This is
    set/cleared by the Qt kernel.

    \value WA_PaintOnScreen Indicates that the widget wants to draw directly
    onto the screen. Widgets with this attribute set do not participate in
    composition management, i.e. they cannot be semi-transparent or shine
    through semi-transparent overlapping widgets. \note This flag is only
    supported on X11 and it disables double buffering. On Qt for Embedded
    Linux, the flag only works when set on a top-level widget and it relies on
    support from the active screen driver. This flag is set or cleared by the
    widget's author. To render outside of Qt's paint system, e.g., if you
    require native painting primitives, you need to reimplement
    QWidget::paintEngine() to return 0 and set this flag.

    \value WA_PendingMoveEvent Indicates that a move event is pending, e.g.,
    when a hidden widget was moved. This flag is set or cleared by the Qt
    kernel.

    \value WA_PendingResizeEvent Indicates that a resize event is pending,
    e.g., when a hidden widget was resized. This flag is set or cleared by the
    Qt kernel.

    \value WA_QuitOnClose Makes Qt quit the application when the last widget
    with the attribute set has accepted closeEvent(). This behavior can be
    modified with the QApplication::quitOnLastWindowClosed property. By default
    this attribute is set for all widgets of type Qt::Window.

    \value WA_Resized Indicates that the widget has an explicit size. This flag
    is set or cleared by QWidget::resize() and QWidget::setGeometry().

    \value WA_RightToLeft Indicates that the layout direction for the widget
    is right to left.

    \value WA_SetCursor Indicates that the widget has a cursor of its own. This
    flag is set or cleared by QWidget::setCursor() and QWidget::unsetCursor().

    \value WA_SetFont Indicates that the widget has a font of its own. This
    flag is set or cleared by QWidget::setFont().

    \value WA_SetPalette Indicates that the widget has a palette of its own.
    This flag is set or cleared by QWidget::setPalette().

    \value WA_SetStyle Indicates that the widget has a style of its own. This
    flag is set or cleared by QWidget::setStyle().

    \value WA_ShowModal \e{This attribute has been deprecated.} Use
    QWidget::windowModality instead.

    \value WA_TranslucentBackground Indicates that the widget should have a
    translucent background, i.e., any non-opaque regions of the widgets will be
    translucent because the widget will have an alpha channel. Setting this
    flag causes WA_NoSystemBackground to be set. This flag is set or cleared by
    the widget's author.

    \value WA_UnderMouse Indicates that the widget is under the mouse cursor.
    The value is not updated correctly during drag and drop operations. There
    is also a getter function, QWidget::underMouse(). This flag is set or
    cleared by the Qt kernel.

    \value WA_UpdatesDisabled Indicates that updates are blocked (including the
    system background). This flag is set or cleared by the Qt kernel.
    \warning This flag must \e never be set or cleared by the widget's author.

    \value WA_WindowModified Indicates that the window is marked as modified.
    On some platforms this flag will do nothing, on others the window will
    take a modified appearance. This flag is set or cleared by
    QWidget::setWindowModified().

    \value WA_WindowPropagation Makes a toplevel window inherit font and
    palette from its parent.

    \value WA_SetLocale Indicates the locale should be taken into consideration
    in the widget.

    \value WA_StyledBackground Indicates the widget should be drawn using a
    styled background.

    \value WA_ShowWithoutActivating Show the widget without making it active.

    \value WA_NativeWindow Indicates that a native window is created for the
    widget. Enabling this flag will also force a native window for the widget's
    ancestors unless Qt::WA_DontCreateNativeAncestors is set.

    \value WA_DontCreateNativeAncestors Indicates that the widget's ancestors
    are kept non-native even though the widget itself is native.

    \value WA_X11NetWmWindowTypeDesktop Adds _NET_WM_WINDOW_TYPE_DESKTOP to the
    window's _NET_WM_WINDOW_TYPE X11 window property. See
    http://standards.freedesktop.org/wm-spec/ for more details. This attribute
    has no effect on non-X11 platforms.

    \value WA_X11NetWmWindowTypeDock Adds _NET_WM_WINDOW_TYPE_DOCK to the
    window's _NET_WM_WINDOW_TYPE X11 window property. See
    http://standards.freedesktop.org/wm-spec/ for more details. This attribute
    has no effect on non-X11 platforms.

    \value WA_X11NetWmWindowTypeToolBar Adds _NET_WM_WINDOW_TYPE_TOOLBAR to the
    window's _NET_WM_WINDOW_TYPE X11 window property. See
    http://standards.freedesktop.org/wm-spec/ for more details. This attribute
    has no effect on non-X11 platforms. \note Qt automaticaly sets this
    attribute for QToolBar.

    \value WA_X11NetWmWindowTypeMenu Adds _NET_WM_WINDOW_TYPE_MENU to the
    window's _NET_WM_WINDOW_TYPE X11 window property. See
    http://standards.freedesktop.org/wm-spec/ for more details. This attribute
    has no effect on non-X11 platforms. \note Qt automatically sets this
    attribute for QMenu when torn-off.

    \value WA_X11NetWmWindowTypeUtility Adds _NET_WM_WINDOW_TYPE_UTILITY to the
    window's _NET_WM_WINDOW_TYPE X11 window property. See
    http://standards.freedesktop.org/wm-spec/ for more details. This attribute
    has no effect on non-X11 platforms. \note Qt automatically sets this
    attribute for the Qt::Tool window type.

    \value WA_X11NetWmWindowTypeSplash Adds _NET_WM_WINDOW_TYPE_SPLASH to the
    window's _NET_WM_WINDOW_TYPE X11 window property. See
    http://standards.freedesktop.org/wm-spec/ for more details. This attribute
    has no effect on non-X11 platforms. \note Qt automatically sets this
    attribute for the Qt::SplashScreen window type.

    \value WA_X11NetWmWindowTypeDialog Adds _NET_WM_WINDOW_TYPE_DIALOG
    to the window's _NET_WM_WINDOW_TYPE X11 window property. See
    http://standards.freedesktop.org/wm-spec/ for more details. This
    attribute has no effect on non-X11 platforms. \note Qt automatically sets
    this attribute for the Qt::Dialog window types.

    \value WA_X11NetWmWindowTypeDropDownMenu Adds
    _NET_WM_WINDOW_TYPE_DROPDOWN_MENU to the window's
    _NET_WM_WINDOW_TYPE X11 window property. See
    http://standards.freedesktop.org/wm-spec/ for more details. This
    attribute has no effect on non-X11 platforms. \note Qt
    automatically sets this attribute for QMenus added to a QMenuBar.

    \value WA_X11NetWmWindowTypePopupMenu Adds _NET_WM_WINDOW_TYPE_POPUP_MENU
    to the window's _NET_WM_WINDOW_TYPE X11 window property. See
    http://standards.freedesktop.org/wm-spec/ for more details. This attribute
    has no effect on non-X11 platforms. \note Qt automatically sets this
    attribute for QMenu.

    \value WA_X11NetWmWindowTypeToolTip Adds _NET_WM_WINDOW_TYPE_TOOLTIP to the
    window's _NET_WM_WINDOW_TYPE X11 window property. See
    http://standards.freedesktop.org/wm-spec/ for more details. This attribute
    has no effect on non-X11 platforms. \note Qt automatically sets this
    attribute for the Qt::ToolTip window type.

    \value WA_X11NetWmWindowTypeNotification Adds
    _NET_WM_WINDOW_TYPE_NOTIFICATION to the window's _NET_WM_WINDOW_TYPE X11
    window property. See http://standards.freedesktop.org/wm-spec/ for more
    details. This attribute has no effect on non-X11 platforms.

    \value WA_X11NetWmWindowTypeCombo Adds _NET_WM_WINDOW_TYPE_COMBO
    to the window's _NET_WM_WINDOW_TYPE X11 window property. See
    http://standards.freedesktop.org/wm-spec/ for more details. This attribute
    has no effect on non-X11 platforms. \note Qt automatically sets this
    attribute for the QComboBox pop-up.

    \value WA_X11NetWmWindowTypeDND Adds _NET_WM_WINDOW_TYPE_DND to
    the window's _NET_WM_WINDOW_TYPE X11 window property. See
    http://standards.freedesktop.org/wm-spec/ for more details. This attribute
    has no effect on non-X11 platforms. \note Qt automatically sets this
    attribute on the feedback widget used during a drag.

    \value WA_X11DoNotAcceptFocus Asks the window manager to not give focus
    to this top level window. This attribute has no effect on non-X11
    platforms.

    \omitvalue WA_DropSiteRegistered
    \omitvalue WA_SetLayoutDirection
    \omitvalue WA_WState_ConfigPending
    \omitvalue WA_WState_Created
    \omitvalue WA_WState_ExplicitShowHide
    \omitvalue WA_WState_Hidden
    \omitvalue WA_WState_InPaintEvent
    \omitvalue WA_WState_OwnSizePolicy
    \omitvalue WA_WState_Polished
    \omitvalue WA_WState_Reparented
    \omitvalue WA_WState_Visible
    \omitvalue WA_SetWindowIcon
    \omitvalue WA_LaidOut
    \omitvalue WA_GrabbedShortcut
    \omitvalue WA_DontShowOnScreen
    \omitvalue WA_ForceUpdatesDisabled
    \omitvalue WA_AttributeCount
    \omitvalue WA_StyleSheet
    \omitvalue WA_X11BypassTransientForHint
    \omitvalue WA_SetWindowModality
    \omitvalue WA_NoX11EventCompression
*/

/*! \typedef Qt::HANDLE

    Platform-specific handle type for system objects. This is
    equivalent to \c{unsigned long} on X11.

    \warning Using this type is not portable.
*/

/*!
    \enum Qt::Key

    The key names used by Katie.

    \value Key_Backspace
    \value Key_Tab
    \value Key_Linefeed
    \value Key_Clear
    \value Key_Return
    \value Key_Pause      The Pause/Break key (\note Not anything to do with pausing media)
    \value Key_Scroll_Lock
    \value Key_Sys_Req
    \value Key_Escape
    \value Key_Delete
    \value Key_Multi_key
    \value Key_Codeinput
    \value Key_SingleCandidate
    \value Key_MultipleCandidate
    \value Key_PreviousCandidate
    \value Key_Kanji
    \value Key_Muhenkan
    \value Key_Henkan_Mode
    \value Key_Henkan
    \value Key_Romaji
    \value Key_Hiragana
    \value Key_Katakana
    \value Key_Hiragana_Katakana
    \value Key_Zenkaku
    \value Key_Hankaku
    \value Key_Zenkaku_Hankaku
    \value Key_Touroku
    \value Key_Massyo
    \value Key_Kana_Lock
    \value Key_Kana_Shift
    \value Key_Eisu_Shift
    \value Key_Eisu_toggle
    \value Key_Kanji_Bangou
    \value Key_Zen_Koho
    \value Key_Mae_Koho
    \value Key_Home
    \value Key_Left
    \value Key_Up
    \value Key_Right
    \value Key_Down
    \value Key_Prior
    \value Key_Page_Up
    \value Key_Next
    \value Key_Page_Down
    \value Key_End
    \value Key_Begin
    \value Key_Select
    \value Key_Print
    \value Key_Execute
    \value Key_Insert
    \value Key_Undo
    \value Key_Redo
    \value Key_Menu
    \value Key_Find
    \value Key_Cancel
    \value Key_Help
    \value Key_Break
    \value Key_Mode_switch
    \value Key_script_switch
    \value Key_Num_Lock
    \value Key_F1
    \value Key_F2
    \value Key_F3
    \value Key_F4
    \value Key_F5
    \value Key_F6
    \value Key_F7
    \value Key_F8
    \value Key_F9
    \value Key_F10
    \value Key_F11
    \value Key_F12
    \value Key_F13
    \value Key_F14
    \value Key_F15
    \value Key_F16
    \value Key_F17
    \value Key_F18
    \value Key_F19
    \value Key_F20
    \value Key_F21
    \value Key_F22
    \value Key_F23
    \value Key_F24
    \value Key_F25
    \value Key_F26
    \value Key_F27
    \value Key_F28
    \value Key_F29
    \value Key_F30
    \value Key_F31
    \value Key_F32
    \value Key_F33
    \value Key_F34
    \value Key_F35
    \value Key_Shift_L
    \value Key_Shift_R
    \value Key_Control_L
    \value Key_Control_R
    \value Key_Caps_Lock
    \value Key_Shift_Lock
    \value Key_Meta_L
    \value Key_Meta_R
    \value Key_Alt_L
    \value Key_Alt_R
    \value Key_Super_L
    \value Key_Super_R
    \value Key_Hyper_L
    \value Key_Hyper_R

    \value Key_Space
    \value Key_Exclam
    \value Key_QuoteDbl
    \value Key_NumberSign
    \value Key_Dollar
    \value Key_Percent
    \value Key_Ampersand
    \value Key_Apostrophe
    \value Key_ParenLeft
    \value Key_ParenRight
    \value Key_Asterisk
    \value Key_Plus
    \value Key_Comma
    \value Key_Minus
    \value Key_Period
    \value Key_Slash
    \value Key_0
    \value Key_1
    \value Key_2
    \value Key_3
    \value Key_4
    \value Key_5
    \value Key_6
    \value Key_7
    \value Key_8
    \value Key_9
    \value Key_Colon
    \value Key_Semicolon
    \value Key_Less
    \value Key_Equal
    \value Key_Greater
    \value Key_Question
    \value Key_At
    \value Key_A
    \value Key_B
    \value Key_C
    \value Key_D
    \value Key_E
    \value Key_F
    \value Key_G
    \value Key_H
    \value Key_I
    \value Key_J
    \value Key_K
    \value Key_L
    \value Key_M
    \value Key_N
    \value Key_O
    \value Key_P
    \value Key_Q
    \value Key_R
    \value Key_S
    \value Key_T
    \value Key_U
    \value Key_V
    \value Key_W
    \value Key_X
    \value Key_Y
    \value Key_Z
    \value Key_BracketLeft
    \value Key_Backslash
    \value Key_BracketRight
    \value Key_AsciiCircum
    \value Key_Underscore
    \value Key_BraceLeft
    \value Key_Bar
    \value Key_BraceRight
    \value Key_AsciiTilde
    \value Key_nobreakspace
    \value Key_exclamdown
    \value Key_cent
    \value Key_sterling
    \value Key_currency
    \value Key_yen
    \value Key_brokenbar
    \value Key_section
    \value Key_diaeresis
    \value Key_copyright
    \value Key_ordfeminine
    \value Key_guillemotleft
    \value Key_notsign
    \value Key_hyphen
    \value Key_registered
    \value Key_macron
    \value Key_degree
    \value Key_plusminus
    \value Key_twosuperior
    \value Key_threesuperior
    \value Key_acute
    \value Key_mu
    \value Key_paragraph
    \value Key_periodcentered
    \value Key_cedilla
    \value Key_onesuperior
    \value Key_masculine
    \value Key_guillemotright
    \value Key_onequarter
    \value Key_onehalf
    \value Key_threequarters
    \value Key_questiondown
    \value Key_Agrave
    \value Key_Aacute
    \value Key_Acircumflex
    \value Key_Atilde
    \value Key_Adiaeresis
    \value Key_Aring
    \value Key_AE
    \value Key_Ccedilla
    \value Key_Egrave
    \value Key_Eacute
    \value Key_Ecircumflex
    \value Key_Ediaeresis
    \value Key_Igrave
    \value Key_Iacute
    \value Key_Icircumflex
    \value Key_Idiaeresis
    \value Key_ETH
    \value Key_Eth
    \value Key_Ntilde
    \value Key_Ograve
    \value Key_Oacute
    \value Key_Ocircumflex
    \value Key_Otilde
    \value Key_Odiaeresis
    \value Key_multiply
    \value Key_Oslash
    \value Key_Ooblique
    \value Key_Ugrave
    \value Key_Uacute
    \value Key_Ucircumflex
    \value Key_Udiaeresis
    \value Key_Yacute
    \value Key_THORN
    \value Key_Thorn
    \value Key_ssharp
    \value Key_agrave
    \value Key_aacute
    \value Key_acircumflex
    \value Key_atilde
    \value Key_adiaeresis
    \value Key_aring
    \value Key_ae
    \value Key_ccedilla
    \value Key_egrave
    \value Key_eacute
    \value Key_ecircumflex
    \value Key_ediaeresis
    \value Key_igrave
    \value Key_iacute
    \value Key_icircumflex
    \value Key_idiaeresis
    \value Key_eth
    \value Key_ntilde
    \value Key_ograve
    \value Key_oacute
    \value Key_ocircumflex
    \value Key_otilde
    \value Key_odiaeresis
    \value Key_division
    \value Key_oslash
    \value Key_ooblique
    \value Key_ugrave
    \value Key_uacute
    \value Key_ucircumflex
    \value Key_udiaeresis
    \value Key_yacute
    \value Key_thorn
    \value Key_ydiaeresis

    \value Key_Shift
    \value Key_Control
    \value Key_Meta
    \value Key_Alt
    \value Key_Backtab

    \sa QKeyEvent::key()
*/

/*!
    \enum Qt::HitTestAccuracy

    This enum contains the types of accuracy that can be used by the
    QTextDocument class when testing for mouse clicks on text documents.

    \value ExactHit The point at which input occurred must coincide
                    exactly with input-sensitive parts of the document.
    \value FuzzyHit The point at which input occurred can lie close to
                    input-sensitive parts of the document.

    This enum is defined in the \c <QTextDocument> header file.
*/

/*!
    \enum Qt::WhiteSpaceMode

    This enum describes the types of whitespace mode that are used by
    the QTextDocument class to meet the requirements of different kinds
    of textual information.

    \value WhiteSpaceNormal         The whitespace mode used to display
                                    normal word wrapped text in paragraphs.
    \value WhiteSpacePre            A preformatted text mode in which
                                    whitespace is reproduced exactly.
    \value WhiteSpaceNoWrap

    \omitvalue WhiteSpaceModeUndefined

    This enum is defined in the \c <QTextDocument> header file.
*/

/*!
    \enum Qt::CheckState

    This enum describes the state of checkable items, controls, and widgets.

    \value Unchecked        The item is unchecked.
    \value PartiallyChecked The item is partially checked. Items in hierarchical models
                            may be partially checked if some, but not all, of their
                            children are checked.
    \value Checked          The item is checked.

    \sa QCheckBox, Qt::ItemFlags, Qt::ItemDataRole
*/


/*!
    \enum Qt::ToolButtonStyle

    The style of the tool button, describing how the button's text and
    icon should be displayed.

    \value ToolButtonIconOnly Only display the icon.
    \value ToolButtonTextOnly Only display the text.
    \value ToolButtonTextBesideIcon The text appears beside the icon.
    \value ToolButtonTextUnderIcon The text appears under the icon.
    \value ToolButtonFollowStyle Follow the \l{QStyle::SH_ToolButtonStyle}{style}.
*/

/*!
    \enum Qt::Corner

    This enum type specifies a corner in a rectangle:

    \value TopLeftCorner     The top-left corner of the rectangle.
    \value TopRightCorner    The top-right corner of the rectangle.
    \value BottomLeftCorner  The bottom-left corner of the rectangle.
    \value BottomRightCorner The bottom-right corner of the rectangle.

    \omitvalue TopLeft
    \omitvalue TopRight
    \omitvalue BottomLeft
    \omitvalue BottomRight
*/

/*!
    \enum Qt::ScrollBarPolicy

    This enum type describes the various modes of QAbstractScrollArea's scroll
    bars.

    \value ScrollBarAsNeeded QAbstractScrollArea shows a scroll bar when the
    content is too large to fit and not otherwise. This is the
    default.

    \value ScrollBarAlwaysOff QAbstractScrollArea never shows a scroll bar.

    \value ScrollBarAlwaysOn  QAbstractScrollArea always shows a scroll bar.

    (The modes for the horizontal and vertical scroll bars are
    independent.)
*/

/*!
    \enum Qt::ArrowType

    \value NoArrow
    \value UpArrow
    \value DownArrow
    \value LeftArrow
    \value RightArrow
*/

/*!
    \enum Qt::FocusReason

    This enum specifies why the focus changed. It will be passed
    through QWidget::setFocus and can be retrieved in the QFocusEvent
    sent to the widget upon focus change.

    \value MouseFocusReason        A mouse action occurred.
    \value TabFocusReason          The Tab key was pressed.
    \value BacktabFocusReason      A Backtab occurred. The input for this may
                                   include the Shift or Control keys;
                                   e.g. Shift+Tab.
    \value ActiveWindowFocusReason The window system made this window either
                                   active or inactive.
    \value PopupFocusReason        The application opened/closed a pop-up that
                                   grabbed/released the keyboard focus.
    \value ShortcutFocusReason     The user typed a label's buddy shortcut
    \value MenuBarFocusReason      The menu bar took focus.
    \value OtherFocusReason        Another reason, usually application-specific.

    \omitvalue NoFocusReason

    \sa {Keyboard Focus}
*/

/*!
    \enum Qt::WindowState

    \keyword window state

    This enum type is used to specify the current state of a top-level
    window.

    The states are

    \value WindowNoState   The window has no state set (in normal state).
    \value WindowMinimized The window is minimized (i.e. iconified).
    \value WindowMaximized The window is maximized with a frame around it.
    \value WindowFullScreen The window fills the entire screen without any frame around it.
    \value WindowActive The window is the active window, i.e. it has keyboard focus.

*/

/*!
    \enum Qt::ContextMenuPolicy

    This enum type defines the various policies a widget can have with
    respect to showing a context menu.

    \value NoContextMenu the widget does not feature a context menu,
    context menu handling is deferred to the widget's parent.
    \value PreventContextMenu the widget does not feature a context
    menu, and in contrast to \c NoContextMenu, the handling is \e not
    deferred to the widget's parent. This means that all right mouse
    button events are guaranteed to be delivered to the widget itself
    through mousePressEvent(), and mouseReleaseEvent().
    \value DefaultContextMenu  the widget's QWidget::contextMenuEvent() handler is called.
    \value ActionsContextMenu  the widget displays its QWidget::actions() as context menu.
    \value CustomContextMenu  the widget emits the QWidget::customContextMenuRequested() signal.
*/

/*!
    \enum Qt::FocusPolicy

    This enum type defines the various policies a widget can have with
    respect to acquiring keyboard focus.

    \value TabFocus  the widget accepts focus by tabbing.
    \value ClickFocus  the widget accepts focus by clicking.
    \value StrongFocus  the widget accepts focus by both tabbing
                    and clicking.
    \value WheelFocus  like Qt::StrongFocus plus the widget accepts
                    focus by using the mouse wheel.
    \value NoFocus  the widget does not accept focus.

*/

/*!
    \enum Qt::ShortcutContext

    For a QEvent::Shortcut event to occur, the shortcut's key sequence
    must be entered by the user in a context where the shortcut is
    active. The possible contexts are these:

    \value WidgetShortcut The shortcut is active when its
    parent widget has focus.
    \value WidgetWithChildrenShortcut The shortcut is active
    when its parent widget, or any of its children has focus.
    Children which are top-level widgets, except pop-ups, are
    not affected by this shortcut context.
    \value WindowShortcut The shortcut is active when its
    parent widget is a logical subwidget of the
    active top-level window.
    \value ApplicationShortcut The shortcut is active when one of
    the applications windows are active.
*/

/*!
    \typedef Qt::WFlags

    Synonym for Qt::WindowFlags.
*/

/*!
    \enum Qt::WindowType

    \keyword window flag

    This enum type is used to specify various window-system properties
    for the widget. They are fairly unusual but necessary in a few
    cases. Some of these flags depend on whether the underlying window
    manager supports them.

    The main types are

    \value Widget  This is the default type for QWidget. Widgets of
                   this type are child widgets if they have a parent,
                   and independent windows if they have no parent.
                   See also Qt::Window and Qt::SubWindow.

    \value Window  Indicates that the widget is a window, usually
                   with a window system frame and a title bar,
                   irrespective of whether the widget has a parent or
                   not. Note that it is not possible to unset this
                   flag if the widget does not have a parent.

    \value Dialog  Indicates that the widget is a window that should
                   be decorated as a dialog (i.e., typically no
                   maximize or minimize buttons in the title bar).
                   This is the default type for QDialog. If you want
                   to use it as a modal dialog, it should be launched
                   from another window, or have a parent and used
                   with the QWidget::windowModality property. If you make
                   it modal, the dialog will prevent other top-level
                   windows in the application from getting any input.
                   We refer to a top-level window that has a parent
                   as a \e secondary window.

    \value Popup   Indicates that the widget is a pop-up top-level
                   window, i.e. that it is modal, but has a window
                   system frame appropriate for pop-up menus.

    \value Tool    Indicates that the widget is a tool window. A tool
                   window is often a small window with a smaller than
                   usual title bar and decoration, typically used for
                   collections of tool buttons. If there is a parent,
                   the tool window will always be kept on top of it.
                   If there isn't a parent, you may consider using
                   Qt::WindowStaysOnTopHint as well. If the window
                   system supports it, a tool window can be decorated
                   with a somewhat lighter frame. It can also be
                   combined with Qt::FramelessWindowHint.

    \value ToolTip Indicates that the widget is a tooltip. This is
                   used internally to implement
                   \l{QWidget::toolTip}{tooltips}.

    \value SplashScreen Indicates that the window is a splash screen.
                        This is the default type for QSplashScreen.

    \value Desktop  Indicates that this widget is the desktop. This
                    is the type for QDesktopWidget.

    \value SubWindow  Indicates that this widget is a sub-window.

    There are also a number of flags which you can use to customize
    the appearance of top-level windows. These have no effect on other
    windows:

    \value X11BypassWindowManagerHint  Bypass the window
           manager completely. This results in a borderless window
           that is not managed at all (i.e., no keyboard input unless
           you call QWidget::activateWindow() manually).

    \value FramelessWindowHint  Produces a borderless window.
           The user cannot move or resize a borderless window via the window
           system. On X11, the result of the flag is dependent on the window manager and its
           ability to understand Motif and/or NETWM hints. Most existing
           modern window managers can handle this.

    The \c CustomizeWindowHint flag is used to enable customization of
    the window controls. This flag must be set to allow the \c
    WindowTitleHint, \c WindowSystemMenuHint, \c
    WindowMinimizeButtonHint, \c WindowMaximizeButtonHint and \c
    WindowCloseButtonHint flags to be changed.

    \value CustomizeWindowHint  Turns off the default window title hints.

    \value WindowTitleHint  Gives the window a title bar.

    \value WindowSystemMenuHint Adds a window system menu, and
    possibly a close button. If you need to hide or show a close button,
    it is more portable to use \c WindowCloseButtonHint.

    \value WindowMinimizeButtonHint  Adds a minimize button. On
           some platforms this implies Qt::WindowSystemMenuHint for it to work.

    \value WindowMaximizeButtonHint  Adds a maximize button. On
           some platforms this implies Qt::WindowSystemMenuHint for it to work.

    \value WindowMinMaxButtonsHint  Adds a minimize and a maximize
           button. On some platforms this implies Qt::WindowSystemMenuHint for it to work.

    \value WindowCloseButtonHint  Adds a close button. On
           some platforms this implies Qt::WindowSystemMenuHint for it
           to work.

    \value WindowContextHelpButtonHint  Adds a context help button to dialogs.
           On some platforms this implies Qt::WindowSystemMenuHint for it to work.

    \value BypassGraphicsProxyWidget Prevents the window and its children from
           automatically embedding themselves into a QGraphicsProxyWidget if the
           parent widget is already embedded. You can set this flag if you
           want your widget to always be a toplevel widget on the desktop,
           regardless of whether the parent widget is embedded in a scene or
           not.

    \value WindowShadeButtonHint

    \value WindowStaysOnTopHint  Informs the window system that the
           window should stay on top of all other windows. Note that
           on some window managers on X11 you also have to pass
           Qt::X11BypassWindowManagerHint for this flag to work
           correctly.

    \value WindowStaysOnBottomHint Informs the window system that the
           window should stay on bottom of all other windows. Note
           that on X11 this hint will work only in window managers
           that support _NET_WM_STATE_BELOW atom. If a window always
           on the bottom has a parent, the parent will also be left on
           the bottom.

    \value WindowType_Mask  A mask for extracting the window type
                            part of the window flags.

    \sa QWidget::windowFlags, {Window Flags Example}
*/

/*!
    \enum Qt::DropAction

    \value CopyAction       Copy the data to the target.
    \value MoveAction       Move the data from the source to the target.
    \value LinkAction       Create a link from the source to the target.
    \value ActionMask
    \value IgnoreAction     Ignore the action (do nothing with the data).
*/

/*!
  \enum Qt::AnchorAttribute

  An anchor has one or more of the following attributes:

  \value AnchorName the name attribute of the anchor. This attribute is
  used when scrolling to an anchor in the document.

  \value AnchorHref the href attribute of the anchor. This attribute is
  used when a link is clicked to determine what content to load.
*/

/*!
    \enum Qt::SortOrder

    This enum describes how the items in a widget are sorted.

    \value AscendingOrder The items are sorted ascending e.g. starts with
    'AAA' ends with 'ZZZ' in Latin-1 locales

    \value DescendingOrder The items are sorted descending e.g. starts with
    'ZZZ' ends with 'AAA' in Latin-1 locales
*/

/*!
    \enum Qt::ClipOperation

    \value NoClip This operation turns clipping off.

    \value ReplaceClip Replaces the current clip path/rect/region with
    the one supplied in the function call.

    \value IntersectClip Intersects the current clip path/rect/region
    with the one supplied in the function call.

    \value UniteClip Unites the current clip path/rect/region with the
    one supplied in the function call.
*/

/*!
    \enum Qt::ItemSelectionMode

    This enum is used in QGraphicsItem, QGraphicsScene and QGraphicsView to
    specify how items are selected, or how to determine if a shapes and items
    collide.

    \value ContainsItemShape The output list contains only items whose
           \l{QGraphicsItem::shape()}{shape} is fully contained inside the
           selection area. Items that intersect with the area's outline are
           not included.

    \value IntersectsItemShape The output list contains both items whose
           \l{QGraphicsItem::shape()}{shape} is fully contained inside the
           selection area, and items that intersect with the area's
           outline. This is a common mode for rubber band selection.

    \value ContainsItemBoundingRect The output list contains only items whose
           \l{QGraphicsItem::boundingRect()}{bounding rectangle} is fully
           contained inside the selection area. Items that intersect with the
           area's outline are not included.

    \value IntersectsItemBoundingRect The output list contains both items
           whose \l{QGraphicsItem::boundingRect()}{bounding rectangle} is
           fully contained inside the selection area, and items that intersect
           with the area's outline. This method is commonly used for
           determining areas that need redrawing.

    \sa QGraphicsScene::items(), QGraphicsScene::collidingItems(),
        QGraphicsView::items(), QGraphicsItem::collidesWithItem(),
        QGraphicsItem::collidesWithPath()
*/

/*!
    \enum Qt::FillRule

    Specifies which method should be used to fill the paths and polygons.

    \value OddEvenFill Specifies that the region is filled using the
    odd even fill rule. With this rule, we determine whether a point
    is inside the shape by using the following method.
    Draw a horizontal line from the point to a location outside the shape,
    and count the number of intersections. If the number of intersections
    is an odd number, the point is inside the shape. This mode is the
    default.

    \value WindingFill Specifies that the region is filled using the
    non zero winding rule. With this rule, we determine whether a
    point is inside the shape by using the following method.
    Draw a horizontal line from the point to a location outside the shape.
    Determine whether the direction of the line at each intersection point
    is up or down. The winding number is determined by summing the
    direction of each intersection. If the number is non zero, the point
    is inside the shape. This fill mode can also in most cases be considered
    as the intersection of closed shapes.
*/

/*!
    \enum Qt::TextFormat

    This enum is used in widgets that can display both plain text and
    rich text, e.g. QLabel. It is used for deciding whether a text
    string should be interpreted as one or the other. This is normally
    done by passing one of the enum values to a setTextFormat()
    function.

    \value PlainText  The text string is interpreted as a plain text
        string.

    \value RichText The text string is interpreted as a rich text
        string.

    \value AutoText The text string is interpreted as for
        Qt::RichText if Qt::mightBeRichText() returns true, otherwise
        as Qt::PlainText.
*/

/*!
    \enum Qt::CursorShape

    This enum type defines the various cursors that can be used.

    The standard arrow cursor is the default for widgets in a normal state.

    \value ArrowCursor    \inlineimage cursor-arrow.png
                          The standard arrow cursor.
    \value UpArrowCursor  \inlineimage cursor-uparrow.png
                          An arrow pointing upwards toward the top of the screen.
    \value CrossCursor    \inlineimage cursor-cross.png
                          A crosshair cursor, typically used to help the
                          user accurately select a point on the screen.
    \value WaitCursor     \inlineimage cursor-wait.png
                          An hourglass or watch cursor, usually shown during
                          operations that prevent the user from interacting with
                          the application.
    \value IBeamCursor    \inlineimage cursor-ibeam.png
                          A caret or ibeam cursor, indicating that a widget can
                          accept and display text input.
    \value SizeVerCursor  \inlineimage cursor-sizev.png
                          A cursor used for elements that are used to vertically
                          resize top-level windows.
    \value SizeHorCursor  \inlineimage cursor-sizeh.png
                          A cursor used for elements that are used to horizontally
                          resize top-level windows.
    \value SizeBDiagCursor  \inlineimage cursor-sizeb.png
                          A cursor used for elements that are used to diagonally
                          resize top-level windows at their top-right and
                          bottom-left corners.
    \value SizeFDiagCursor  \inlineimage cursor-sizef.png
                          A cursor used for elements that are used to diagonally
                          resize top-level windows at their top-left and
                          bottom-right corners.
    \value SizeAllCursor  \inlineimage cursor-sizeall.png
                          A cursor used for elements that are used to resize
                          top-level windows in any direction.
    \value BlankCursor    A blank/invisible cursor, typically used when the cursor
                          shape needs to be hidden.
    \value SplitVCursor   \inlineimage cursor-vsplit.png
                          A cursor used for vertical splitters, indicating that
                          a handle can be dragged horizontally to adjust the use
                          of available space.
    \value SplitHCursor   \inlineimage cursor-hsplit.png
                          A cursor used for horizontal splitters, indicating that
                          a handle can be dragged vertically to adjust the use
                          of available space.
    \value PointingHandCursor  \inlineimage cursor-hand.png
                          A pointing hand cursor that is typically used for
                          clickable elements such as hyperlinks.
    \value ForbiddenCursor  \inlineimage cursor-forbidden.png
                          A slashed circle cursor, typically used during drag
                          and drop operations to indicate that dragged content
                          cannot be dropped on particular widgets or inside
                          certain regions.
    \value OpenHandCursor \inlineimage cursor-openhand.png
                          A cursor representing an open hand, typically used to
                          indicate that the area under the cursor is the visible
                          part of a canvas that the user can click and drag in
                          order to scroll around.
    \value ClosedHandCursor \inlineimage cursor-closedhand.png
                          A cursor representing a closed hand, typically used to
                          indicate that a dragging operation is in progress that
                          involves scrolling.
    \value WhatsThisCursor  \inlineimage cursor-whatsthis.png
                          An arrow with a question mark, typically used to indicate
                          the presence of What's This? help for a widget.
    \value BusyCursor     \inlineimage cursor-wait.png
                          An hourglass or watch cursor, usually shown during
                          operations that allow the user to interact with
                          the application while they are performed in the
                          background.
    \value DragMoveCursor
                          A cursor that is usually used when dragging an item.
    \value DragCopyCursor
                          A cursor that is usually used when dragging an item
                          to copy it.
    \value DragLinkCursor
                          A cursor that is usually used when dragging an item
                          to make a link to it.

    \value BitmapCursor
    \omitvalue LastCursor
    \omitvalue CustomCursor
*/

/*!
    \enum Qt::LayoutDirection

    Specifies the direction of Qt's layouts and text handling.

    \value LeftToRight  Left-to-right layout.
    \value RightToLeft  Right-to-left layout.
    \value LayoutDirectionAuto   Automatic layout.

    Right-to-left layouts are necessary for certain languages,
    notably Arabic and Hebrew.

    LayoutDirectionAuto serves two purposes. When used in conjunction with widgets and layouts, it
    will imply to use the layout direction set on the parent widget or QApplication. This
    has the same effect as QWidget::unsetLayoutDirection().

    When LayoutDirectionAuto is used in conjunction with text layouting, it will imply that the text
    directionality is determined from the content of the string to be layouted.

    \sa QApplication::setLayoutDirection(), QWidget::setLayoutDirection(), QTextOption::setTextDirection(), QString::isRightToLeft()
*/

/*!
    \enum Qt::AnchorPoint

    Specifies a side of a layout item that can be anchored. This is used by
    QGraphicsAnchorLayout.

    \value AnchorLeft               The left side of a layout item.
    \value AnchorHorizontalCenter   A "virtual" side that is centered between the left and the
                                    right side of a layout item.
    \value AnchorRight              The right side of a layout item.
    \value AnchorTop                The top side of a layout item.
    \value AnchorVerticalCenter     A "virtual" side that is centered between the top and the
                                    bottom side of a layout item.
    \value AnchorBottom             The bottom side of a layout item.

    \sa QGraphicsAnchorLayout
*/

/*!
    \enum Qt::ItemDataRole

    Each item in the model has a set of data elements associated with
    it, each with its own role. The roles are used by the view to indicate
    to the model which type of data it needs. Custom models should return
    data in these types.

    The general purpose roles (and the associated types) are:

    \value DisplayRole    The key data to be rendered in the form of text. (QString)
    \value DecorationRole The data to be rendered as a decoration in the form
                          of an icon. (QColor, QIcon or QPixmap)
    \value EditRole       The data in a form suitable for editing in an
                          editor. (QString)
    \value ToolTipRole    The data displayed in the item's tooltip. (QString)
    \value StatusTipRole  The data displayed in the status bar. (QString)
    \value WhatsThisRole  The data displayed for the item in "What's This?"
                          mode. (QString)
    \value SizeHintRole   The size hint for the item that will be supplied
                          to views. (QSize)

    Roles describing appearance and meta data (with associated types):

    \value FontRole             The font used for items rendered with the default
                                delegate. (QFont)
    \value TextAlignmentRole    The alignment of the text for items rendered with the
                                default delegate. (Qt::AlignmentFlag)
    \value BackgroundRole       The background brush used for items rendered with
                                the default delegate. (QBrush)
    \value ForegroundRole       The foreground brush (text color, typically)
                                used for items rendered with the default delegate.
                                (QBrush)
    \value CheckStateRole       This role is used to obtain the checked state of
                                an item. (Qt::CheckState)
    \value InitialSortOrderRole This role is used to obtain the initial sort order
                                of a header view section. (Qt::SortOrder). This
                                role was introduced in Qt 4.8.

    User roles:

    \value UserRole       The first role that can be used for application-specific purposes.

    \omitvalue DisplayPropertyRole
    \omitvalue DecorationPropertyRole
    \omitvalue ToolTipPropertyRole
    \omitvalue StatusTipPropertyRole
    \omitvalue WhatsThisPropertyRole

    For user roles, it is up to the developer to decide which types to use and ensure that
    components use the correct types when accessing and setting data.
*/

/*!
    \enum Qt::ItemFlag

    This enum describes the properties of an item:

    \value NoItemFlags It does not have any properties set.
    \value ItemIsSelectable It can be selected.
    \value ItemIsEditable It can be edited.
    \value ItemIsDragEnabled It can be dragged.
    \value ItemIsDropEnabled It can be used as a drop target.
    \value ItemIsUserCheckable It can be checked or unchecked by the user.
    \value ItemIsEnabled The user can interact with the item.
    \value ItemIsTristate The item is checkable with three separate states.

    Note that checkable items need to be given both a suitable set of flags
    and an initial state, indicating whether the item is checked or not.
    This is handled automatically for model/view components, but needs
    to be explicitly set for instances of QListWidgetItem, QTableWidgetItem,
    and QTreeWidgetItem.

    \sa QAbstractItemModel
*/

/*!
    \enum Qt::MatchFlag

    This enum describes the type of matches that can be used when searching
    for items in a model.

    \value MatchExactly     Performs QVariant-based matching.
    \value MatchFixedString Performs string-based matching.
           String-based comparisons are case-insensitive unless the
           \c MatchCaseSensitive flag is also specified.
    \value MatchContains    The search term is contained in the item.
    \value MatchStartsWith  The search term matches the start of the item.
    \value MatchEndsWith    The search term matches the end of the item.
    \value MatchCaseSensitive  The search is case sensitive.
    \value MatchRegExp      Performs string-based matching using a regular
           expression as the search term.
    \value MatchWildcard    Performs string-based matching using a string with
           wildcards as the search term.
    \value MatchWrap        Perform a search that wraps around, so that when
           the search reaches the last item in the model, it begins again at
           the first item and continues until all items have been examined.
    \value MatchRecursive   Searches the entire hierarchy.

    \sa QString::compare(), QRegExp
*/

/*!
    \enum Qt::TextElideMode

    This enum specifies where the ellipsis should appear when
    displaying texts that don't fit:

    \value ElideLeft    The ellipsis should appear at the beginning of the text.
    \value ElideRight   The ellipsis should appear at the end of the text.
    \value ElideMiddle  The ellipsis should appear in the middle of the text.
    \value ElideNone    Ellipsis should NOT appear in the text.

    Qt::ElideMiddle is normally the most appropriate choice for URLs (e.g.,
    "\l{http://bugreports.qt.io/browse/QTWEBSITE-13}{http://bugreports.qt.../QTWEBSITE-13/}"),
    whereas Qt::ElideRight is appropriate
    for other strings.

    \sa QAbstractItemView::textElideMode, QFontMetrics::elidedText(), AlignmentFlag QTabBar::elideMode
*/

/*!
    \enum Qt::WindowModality

    \keyword modal

    This enum specifies the behavior of a modal window. A modal window
    is one that blocks input to other windows. Note that windows that
    are children of a modal window are not blocked.

    The values are:
    \value NonModal         The window is not modal and does not block input to other windows.
    \value WindowModal      The window is modal to a single window hierarchy and blocks input to its parent window, all grandparent windows, and all siblings of its parent and grandparent windows.
    \value ApplicationModal The window is modal to the application and blocks input to all windows.

    \sa QWidget::windowModality, QDialog
*/

/*!
    \enum Qt::TextInteractionFlag

    This enum specifies how a text displaying widget reacts to user input.

    \value NoTextInteraction          No interaction with the text is possible.
    \value TextSelectableByMouse      Text can be selected with the mouse and copied to the clipboard using
                                      a context menu or standard keyboard shortcuts.
    \value TextSelectableByKeyboard   Text can be selected with the cursor keys on the keyboard. A text cursor is shown.
    \value LinksAccessibleByMouse     Links can be highlighted and activated with the mouse.
    \value LinksAccessibleByKeyboard  Links can be focused using tab and activated with enter.
    \value TextEditable               The text is fully editable.

    \value TextEditorInteraction      The default for a text editor.
    \value TextBrowserInteraction     The default for QTextBrowser.
*/

/*!
    \enum Qt::MaskMode

    This enum specifies the behavior of the
    QPixmap::createMaskFromColor() and QImage::createMaskFromColor()
    functions.

    \value MaskInColor   Creates a mask where all pixels matching the given color are opaque.
    \value MaskOutColor  Creates a mask where all pixels matching the given color are transparent.
*/

/*!
    \enum Qt::DockWidgetAreaSizes
    \internal
*/

/*!
    \enum Qt::ToolBarAreaSizes
    \internal
*/

/*!
    \enum Qt::EventPriority

    This enum can be used to specify event priorities.

    \value HighEventPriority Events with this priority are sent before
    events with NormalEventPriority or LowEventPriority.

    \value NormalEventPriority Events with this priority are sent
    after events with HighEventPriority, but before events with
    LowEventPriority.

    \value LowEventPriority Events with this priority are sent after
    events with HighEventPriority or NormalEventPriority.

    Note that these values are provided purely for convenience, since
    event priorities can be any value between \c INT_MAX and \c
    INT_MIN, inclusive. For example, you can define custom priorities
    as being relative to each other:

    \snippet doc/src/snippets/code/doc_src_qnamespace.cpp 1

    \sa QCoreApplication::postEvent()
*/
/*!
    \enum Qt::SizeHint
    \since 4.4

    This enum is used by QGraphicsLayoutItem::sizeHint()

    \value MinimumSize is used to specify the minimum size of a graphics layout item.
    \value PreferredSize is used to specify the preferred size of a graphics layout item.
    \value MaximumSize is used to specify the maximum size of a graphics layout item.
    \value MinimumDescent is used to specify the minimum descent of a text string in a graphics layout item.
    \omitvalue NSizeHints

    \sa QGraphicsLayoutItem::sizeHint()
*/

/*!
    \enum Qt::SizeMode
    \since 4.4

    This enum is used by QPainter::drawRoundedRect() and QPainterPath::addRoundedRect()
    functions to specify the radii of rectangle corners with respect to the dimensions
    of the bounding rectangles specified.

    \value AbsoluteSize Specifies the size using absolute measurements.
    \value RelativeSize Specifies the size relative to the bounding rectangle,
                        typically using percentage measurements.
*/

/*!
    \enum Qt::WindowFrameSection
    \since 4.4

    This enum is used to describe parts of a window frame. It is returned by
    QGraphicsWidget::windowFrameSectionAt() to describe what section of the window
    frame is under the mouse.

    \value NoSection
    \value LeftSection
    \value TopLeftSection
    \value TopSection
    \value TopRightSection
    \value RightSection
    \value BottomRightSection
    \value BottomSection
    \value BottomLeftSection
    \value TitleBarArea

    \sa QGraphicsWidget::windowFrameEvent()
    \sa QGraphicsWidget::paintWindowFrame()
    \sa QGraphicsWidget::windowFrameSectionAt()

*/

/*!
  \enum Qt::TileRule
  \since 4.6

  This enum describes how to repeat or stretch the parts of an image
  when drawing.

  \value StretchTile  Scale the image to fit to the available area.

  \value RepeatTile   Repeat the image until there is no more space. May
  crop the last image.

  \value RoundTile    Similar to Repeat, but scales the image down to
  ensure that the last tile is not cropped.
*/

/*!
    \enum Qt::Initialization
    \internal
*/

/*!
    \enum Qt::CoordinateSystem
    \since 4.6

    This enum specifies the coordinate system.

    \value DeviceCoordinates Coordinates are relative to the upper-left corner
    of the object's paint device.

    \value LogicalCoordinates Coordinates are relative to the upper-left corner
    of the object.
*/
